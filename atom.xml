<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>honpery&#39;s note</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://honpery.com/"/>
  <updated>2018-09-03T06:47:44.219Z</updated>
  <id>https://honpery.com/</id>
  
  <author>
    <name>honpery</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css中的居中</title>
    <link href="https://honpery.com/css%E4%B8%AD%E7%9A%84%E5%B1%85%E4%B8%AD/"/>
    <id>https://honpery.com/css中的居中/</id>
    <published>2018-09-03T13:23:21.000Z</published>
    <updated>2018-09-03T06:47:44.219Z</updated>
    
    <content type="html"><![CDATA[<p></p><p></p><br><a id="more"></a><p></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>css中布局居中是常见的需求和面试题，虽然工作中常用的是flex，但是为了探究各种hack方法，特将发现总结成文。</p><h4 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;         <span class="comment">/* 行高与高度相等 */</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;             <span class="comment">/* 修整行高 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 只垂直居中 */</span></span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="comment">/* 只水平居中 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;               <span class="comment">/* 必须设置宽度 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 只垂直居中 */</span></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绝对定位-负margin"><a href="#绝对定位-负margin" class="headerlink" title="绝对定位 + 负margin"></a>绝对定位 + 负margin</h4><p>这种方式无法自适应宽高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">50px</span>;         <span class="comment">/* 宽度一半 */</span></span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>;          <span class="comment">/* 高度一半 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绝对布局-transform"><a href="#绝对布局-transform" class="headerlink" title="绝对布局 + transform"></a>绝对布局 + transform</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);   <span class="comment">/* 自适应宽高 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绝对布局-auto-margin"><a href="#绝对布局-auto-margin" class="headerlink" title="绝对布局 + auto margin"></a>绝对布局 + auto margin</h4><p>这种方式无法自适应宽高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.5, 0.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://honpery.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://honpery.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>分解koa(1)：中间件</title>
    <link href="https://honpery.com/%E5%88%86%E8%A7%A3koa(1)%EF%BC%9A%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>https://honpery.com/分解koa(1)：中间件/</id>
    <published>2018-07-20T17:17:08.000Z</published>
    <updated>2018-09-03T06:47:44.219Z</updated>
    
    <content type="html"><![CDATA[<p><span></span><br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>中间件是koa的核心特性。</p><p>简单的说，中间件就是函数，请求进来后，依次执行一系列中间件。</p><p>本文深入源码，探究koa的中间件的实现。</p><h2 id="koa中的中间件使用"><a href="#koa中的中间件使用" class="headerlink" title="koa中的中间件使用"></a>koa中的中间件使用</h2><p>调用use方法注册中间件，中间件会保存在队列中。</p><p>中间件即为一函数，包含上下文、next方法参数。</p><p>中间件符合洋葱模型，调用next方法暂停当前中间件执行，调用下一个中间件，按此依次执行，直到一个返回，会反向恢复中间件原有行为。</p><p>洋葱模型很像函数调用栈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'koa'</span>)();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1 start'</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1 end'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2 start'</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2 end'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 start -&gt; 2 start -&gt; 2 end -&gt; 1 start</span></span><br></pre></td></tr></table></figure><p>当然，这里的next函数返回的是Promise对象，可以使用<code>async</code>的方式执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'begin'</span>);</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="剖析中间件原理"><a href="#剖析中间件原理" class="headerlink" title="剖析中间件原理"></a>剖析中间件原理</h2><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>反向思考，将原有中间件剥离出来，作为测试用例。p1/p2为中间件，cb为又返回结果的中间件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1 start.'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1 end.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2 start.'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2 end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'cb'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1 start. -&gt; p2 start. -&gt; cb -&gt; p2 end. -&gt; p1 end.</span></span><br></pre></td></tr></table></figure><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><p>上文提到，洋葱模型很像调用栈，可以借此为出发点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1 start.'</span>);</span><br><span class="line">    p2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1 end.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2 start.'</span>);</span><br><span class="line">    cb();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2 end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'cb'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p1();</span><br></pre></td></tr></table></figure><p>可以看出，这种硬编码耦合性非常高，如果想换个顺序基本gg了。</p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>思考上面的栗子，可否将调用的函数传进去，这就是高阶函数的思路。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p1</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1 start.'</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1 end.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p2</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2 start.'</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2 end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'cb'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p1(p2);</span><br></pre></td></tr></table></figure><p>可以看出，问题是解决了，但是调用方式不优雅，嵌套层次太多。</p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>前文提到，中间件有单独的队列，可以考虑将中间件以数组形式传参。</p><p>可以考虑封装<code>compose</code>函数，在其内部递归调用中间件队列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p1</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1 start.'</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1 end.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p2</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2 start.'</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2 end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'cb'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> fn = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (!fn) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">return</span> fn(dispatch.bind(<span class="literal">null</span>, ++i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compose([p1, p2, cb]);</span><br></pre></td></tr></table></figure><p>此时需求基本达到，按照官方的写法进一步修改。</p><h3 id="上下文、回调"><a href="#上下文、回调" class="headerlink" title="上下文、回调"></a>上下文、回调</h3><p>按照官方的写法，改写测试用例，支持上下文参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test usage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p1</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1 start.'</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1 end.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p2</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2 start.'</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2 end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'cb'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面改写compose方法，支持上下文，需要在调用的传入上下文参数，所以考虑返回一个闭包。</p><p>闭包的参数也可以加一个最终的回调，在其中做返回处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> fn = arr[i];</span><br><span class="line">            <span class="keyword">if</span> (i === arr.length) fn = next;</span><br><span class="line">            <span class="keyword">if</span> (!fn) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">return</span> fn(ctx, dispatch.bind(<span class="literal">null</span>, ++i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dispatch(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> run = compose([p1, p2])(ctx, cb);</span><br></pre></td></tr></table></figure><h3 id="多次调用next"><a href="#多次调用next" class="headerlink" title="多次调用next"></a>多次调用next</h3><p>当多次调用next时，会出先跳跃的问题，需要单独管理索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">-1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; index) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'mluti call next()'</span>);</span><br><span class="line">            index = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> fn = arr[i];</span><br><span class="line">            <span class="keyword">if</span> (i === arr.length) fn = next;</span><br><span class="line">            <span class="keyword">if</span> (!fn) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> fn(ctx, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dispatch(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方法都是同步的情况，<del>~异步场景靠回调</del>~。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>考虑Promise、async、await处理异步的情况，需要对compose进行修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">-1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; index) <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'mluti call next()'</span>));</span><br><span class="line">            index = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> fn = arr[i];</span><br><span class="line">            <span class="keyword">if</span> (i === arr.length) fn = next;</span><br><span class="line">            <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(ctx, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">            &#125;<span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dispatch(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>compose</code>即为koa中的依赖库<code>koa-compose</code>的核心思路。</p><h3 id="参数检测"><a href="#参数检测" class="headerlink" title="参数检测"></a>参数检测</h3><p>中间件队列需是数组，每个元素为函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middleware</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(middleware)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware stack must be an array!'</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware must be composed of functions!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">            index = i</span><br><span class="line">            <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">            <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">            <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处即为<code>koa-compose</code>的全部源码。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文分析了koa中的中间件原理，完全依赖于koa-compose。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="https://honpery.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="koa" scheme="https://honpery.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>React组件通信的方式</title>
    <link href="https://honpery.com/React%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>https://honpery.com/React组件通信的方式/</id>
    <published>2018-06-30T17:07:12.000Z</published>
    <updated>2018-09-03T06:47:44.219Z</updated>
    
    <content type="html"><![CDATA[<p></p><p></p><br><a id="more"></a><p></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>React中组件会形成树的结构，所以如何通信就成了必知问题。</p><h2 id="父-gt-子：属性传递"><a href="#父-gt-子：属性传递" class="headerlink" title="父 -&gt; 子：属性传递"></a>父 -&gt; 子：属性传递</h2><p>这是官方提供的核心功能，父组件通过属性传递数据，子组件通过<code>props</code>属性接受。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;Child name="demo" /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child (props) &#123;</span><br><span class="line">    return &lt;p&gt;&#123;props.name&#125;&lt;/p&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;Middle name="demo" /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Middle (props) &#123;</span><br><span class="line">    return &lt;Child &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child (props) &#123;</span><br><span class="line">    return &lt;p&gt;&#123;props.name&#125;&lt;/p&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子-gt-父：回调"><a href="#子-gt-父：回调" class="headerlink" title="子 -&gt; 父：回调"></a>子 -&gt; 父：回调</h2><p>这种情况也是通过props，只不过传递的是回调函数，当子组件需要传数据给父组件时，调用该回调。</p><p>这里的常见问题是，类组件的this指针问题，需要通过<code>bind</code>方法或者箭头函数的特性进行绑定。</p><p>（无状态组件无this指针，createElement创建的组件有自绑定）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    name = <span class="string">'parent'</span>;</span><br><span class="line"></span><br><span class="line">    getName (name) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> component`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">        &lt;Child onClick=&#123;<span class="keyword">this</span>.getName.bind(<span class="keyword">this</span>)&#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;button onClick=&#123;props.onClick&#125;&gt;click me&lt;/button&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨级组件：Context"><a href="#跨级组件：Context" class="headerlink" title="跨级组件：Context"></a>跨级组件：Context</h2><p>可以使用React 16.3提供的新版Context API来传递数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;Provider, Consumer&#125; = createContext(&#123;</span><br><span class="line">    name: <span class="string">'default'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Provider value=&#123;&#123;<span class="attr">name</span>: <span class="string">'demo'</span>&#125;&#125;&gt;</span><br><span class="line">            &lt;B /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function B () &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;Consumer&gt;</span></span><br><span class="line"><span class="regexp">            &#123;ctx =&gt; &lt;p&gt;&#123;ctx.name&#125;&lt;/</span>p&gt;&#125;</span><br><span class="line">        &lt;<span class="regexp">/Consumer&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="兄弟组件：提升父组件"><a href="#兄弟组件：提升父组件" class="headerlink" title="兄弟组件：提升父组件"></a>兄弟组件：提升父组件</h2><p>可以通过同一父组件进行传递。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">name</span>: <span class="string">''</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child1 onClick=&#123;name =&gt; <span class="keyword">this</span>.setState(&#123;name&#125;)&#125; /&gt;</span><br><span class="line">                &lt;Child2 name=&#123;<span class="keyword">this</span>.state.name&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Child1 (props) &#123;</span></span><br><span class="line"><span class="regexp">    return &lt;button onClick=&#123;() =&gt; props.onClick('child1')&#125;&gt;click me&lt;/</span>button&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;p&gt;&#123;props.name&#125;&lt;/p&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式有几个缺点：</p><ul><li>父组件状态变动，会导致所有子组件走对应的生命周期。</li><li>若只为通信而创建父组件，此组件有些多余，到了层次复杂。</li><li>层次较深时层层传递很蛋疼。</li></ul><p>也可以通过Context API实现，方法同跨级组件。</p><h2 id="万能大法：观察者模式"><a href="#万能大法：观察者模式" class="headerlink" title="万能大法：观察者模式"></a>万能大法：观察者模式</h2><p>可以看到上面的方法，是把通信数据保存在了父组件的状态中。</p><p>换个思路，参考事件机制，通过某个对象进行中转，发布者变更数据后，该对象内部调用订阅者的回调。</p><p>以下为事件代理对象，其中on方法用于订阅，off用于取消订阅，emit用于触发事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventProxy = &#123;</span><br><span class="line">    _queues: &#123;&#125;,</span><br><span class="line">    on(name, cb) &#123;</span><br><span class="line">        <span class="keyword">const</span> queue = <span class="keyword">this</span>._queues[name] = <span class="keyword">this</span>._queues[name] || [];</span><br><span class="line">        queue.push(cb);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    off(name, cb) &#123;</span><br><span class="line">        <span class="keyword">const</span> queue = <span class="keyword">this</span>._queues[name];</span><br><span class="line">        <span class="keyword">if</span> (!queue || !queue.length) <span class="keyword">return</span>;</span><br><span class="line">        queue.forEach(<span class="function"><span class="params">_cb</span> =&gt;</span> _cb !== cb);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    emit(name, data) &#123;</span><br><span class="line">        <span class="keyword">const</span> queue = <span class="keyword">this</span>._queues[name];</span><br><span class="line">        <span class="keyword">if</span> (!queue || !queue.length) <span class="keyword">return</span>;</span><br><span class="line">        queue.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;button onClick=&#123;() =&gt; EventProxy.emit('click', 'demo')&#125;&gt;click&lt;/button&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">name</span>: <span class="string">''</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _onClick (name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;name&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount () &#123;</span><br><span class="line">        EventProxy.on(<span class="string">'click'</span>, <span class="keyword">this</span>._onClick.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount () &#123;</span><br><span class="line">        EventProxy.off(<span class="string">'click'</span>, <span class="keyword">this</span>._onClick.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;p&gt;&#123;this.state.name&#125;&lt;/p&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法看上去很刺激，但是隐患无穷。</p><p>React提倡的单向数据流，更多的是为了调试与维护的时候，更好最终数据的状态与流向。</p><p>观察者模式会造成，发布者的位置不易追踪，造成bug。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>可以看到，更多的还是利用props的单向传递进行通信，观察者模式尽量少用，这是反范式的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://taobaofed.org/blog/2016/11/17/react-components-communication/" target="_blank" rel="noopener">React 组件间通讯</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://honpery.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://honpery.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>js中new操作究竟发生了什么</title>
    <link href="https://honpery.com/js%E4%B8%ADnew%E6%93%8D%E4%BD%9C%E7%A9%B6%E7%AB%9F%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://honpery.com/js中new操作究竟发生了什么/</id>
    <published>2018-06-30T12:00:00.000Z</published>
    <updated>2018-09-03T06:47:44.219Z</updated>
    
    <content type="html"><![CDATA[<p></p><p></p><br><a id="more"></a><p></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文通过以下实例探究js中的new过程究竟发生了什么。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">'demo'</span>);</span><br></pre></td></tr></table></figure><h2 id="构造函数、原型对象、实例的关系"><a href="#构造函数、原型对象、实例的关系" class="headerlink" title="构造函数、原型对象、实例的关系"></a>构造函数、原型对象、实例的关系</h2><p>首先通过控制台，看看实例对象当前的结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: <span class="string">'demo'</span>,</span><br><span class="line">    __proto__: &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: Person,</span><br><span class="line">        getName: Function,</span><br><span class="line">        __proto__: Object</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难看出三者之间的关系如下图。</p><p><img src="/images/prototype-relation.png" alt=""></p><p>构造函数 -&gt; 原型对象：构造函数的prototype属性，指向原型对象。<br>原型对象 -&gt; 构造函数：原型对象的constructor属性，指向其构造函数。<br>实例 -&gt; 原型对象：实例的<code>__proto__</code>属性，指向其原型对象。</p><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><p>this指针是动态的，需要运行时才能知道（箭头函数内部的this是静态的），其指向的4种情况非常重要：</p><ul><li>函数调用：指向全局对象。</li><li>方法调用：指向该对象。</li><li>构造函数：指向对象实例。</li><li>call、apply：指向第一个参数传入的对象。</li></ul><p>可以看到，new的过程需要将this指针指向新的对象实例上。</p><h2 id="代码展示new的过程"><a href="#代码展示new的过程" class="headerlink" title="代码展示new的过程"></a>代码展示new的过程</h2><p>因为new是操作符，为方便演示原理，下面创建了一个<code>newObj</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newObj</span> (<span class="params">constructor, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;;                             <span class="comment">// 创建一个空对象</span></span><br><span class="line">    obj.__proto__ = <span class="keyword">constructor</span>.prototype;      // 修改__proto__指向原型对象</span><br><span class="line">    <span class="keyword">constructor</span>.apply(obj, args);               // 修改this指针</span><br><span class="line">    return obj;                                 // 返回新对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>说到底，new包含四个过程，创建新对象，设置<code>__proto__</code>属性，绑定this，返回该对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://honpery.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://honpery.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>优雅处理npm私有源并用问题</title>
    <link href="https://honpery.com/%E4%BC%98%E9%9B%85%E5%A4%84%E7%90%86npm%E7%A7%81%E6%9C%89%E6%BA%90%E5%B9%B6%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://honpery.com/优雅处理npm私有源并用问题/</id>
    <published>2018-01-06T00:00:00.000Z</published>
    <updated>2018-09-03T06:47:44.219Z</updated>
    
    <content type="html"><![CDATA[<p></p><p></p><br><a id="more"></a><p></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因涉及到业务相关的模块需要发布在内部npm上，其他依赖还是从npm上拉取，如何区分多个源的依赖是一个问题，下文找到了自认为优雅的解决方案。</p><p>核心原理是根据<a href="https://docs.npmjs.com/misc/scope" target="_blank" rel="noopener">scope</a>区分npm源，下文举例scope=sc。</p><p>下文假设Project MAIN依赖Project DEP。</p><h2 id="发布模块"><a href="#发布模块" class="headerlink" title="发布模块"></a>发布模块</h2><p>因为需要根据不同的scope判断npm源，需要为DEP的<code>package.json</code>添加以下字段。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"@sc/demo"</span>,</span><br><span class="line">    <span class="attr">"publishConfig"</span>: &#123;</span><br><span class="line">        <span class="attr">"registry"</span>: <span class="string">"http://npm.sc.com"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>yarn login</code>不支持<code>--registry</code>参数，所以发布的时候需要直接使用<code>npm publish</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm login --registry http://npm.sc.com</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>在MAIN<strong>项目根目录</strong>创建<code>.yarnrc</code>和<code>.npmrc</code>配置文件，内容均为以下配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;@sc:registry&quot; &quot;http://npm.sc.com&quot;</span><br></pre></td></tr></table></figure><p>配置后安装依赖方式照旧，注意包名中要有scope。</p><h2 id="开发模块"><a href="#开发模块" class="headerlink" title="开发模块"></a>开发模块</h2><p>如开发MAIN的时候需要修改调试DEP，可以使用<a href="https://docs.npmjs.com/cli/link" target="_blank" rel="noopener">npm link</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dep project root</span></span><br><span class="line">sudo npm link</span><br><span class="line"></span><br><span class="line"><span class="comment"># main project root</span></span><br><span class="line"><span class="comment"># npm link [dep package name]</span></span><br><span class="line">npm link @sc/demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消link</span></span><br><span class="line">npm unlink &amp;&amp; yarn</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://honpery.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="npm" scheme="https://honpery.com/tags/npm/"/>
    
  </entry>
  
</feed>
